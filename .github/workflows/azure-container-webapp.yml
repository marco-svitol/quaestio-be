# This workflow will build and push a Docker container to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-custom-container?tabs=dotnet&pivots=container-linux
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Create a GitHub Personal access token with "repo" and "read:packages" permissions.
#
# 4. Create three app settings on your Azure Web app:
#       DOCKER_REGISTRY_SERVER_URL: Set this to "https://ghcr.io"
#       DOCKER_REGISTRY_SERVER_USERNAME: Set this to the GitHub username or organization that owns the repository
#       DOCKER_REGISTRY_SERVER_PASSWORD: Set this to the value of your PAT token from the previous step
#
# 5. Change the value for the AZURE_WEBAPP_NAME.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

name: Build and deploy a container to an Azure Web App

env:
  AZURE_WEBAPP_NAME: quaestio-be  # set this to the name of your Azure Web App
  DOCKERHUB_REPO_NAME: quaestio-be

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: azure/login@v1
        with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}'
      - name: Set Web App settings
        uses: Azure/appservice-settings@v1
        with:
          app-name: 'quaestio-be'
          app-settings-json: |
            [ 
              {  
                "name" : "OPSBASEURL",
                "value": "${{ secrets.OPSBASEURL }}",
                "slotSetting": false
              },
              {
                "name" : "OPSCLIENTID",
                "value": "${{ secrets.OPSCLIENTID }}",
                "slotSetting": false
              },
              {
                "name" : "OPSCLIENTSECRET",
                "value": "${{ secrets.OPSCLIENTSECRET }}",
                "slotSetting": false
              },
              {
                "name" : "SQLCONFIG_DBUSER",
                "value": "${{ secrets.SQLCONFIG_DBUSER }}",
                "slotSetting": false
              },
              {
                "name" : "SQLCONFIG_DBPW",
                "value": "${{ secrets.SQLCONFIG_DBPW }}",
                "slotSetting": false
              },
              {
                "name" : "SQLCONFIG_DBSERVER",
                "value": "${{ secrets.SQLCONFIG_DBSERVER }}",
                "slotSetting": false
              },
              {
                "name" : "SQLCONFIG_DBNAME",
                "value": "${{ secrets.SQLCONFIG_DBNAME }}",
                "slotSetting": false
              },
              {
                "name" : "TOKEN_SECRET",
                "value": "${{ secrets.TOKEN_SECRET }}",
                "slotSetting": false
              },
              {
                "name" : "REFRESH_TOKEN_SECRET",
                "value": "${{ secrets.REFRESH_TOKEN_SECRET }}",
                "slotSetting": false
              },
              {
                "name" : "LOGDNAKEY",
                "value": "${{ secrets.LOGDNAKEY }}",
                "slotSetting": false
              },
              {
                "name" : "LOGENV",
                "value": "${{ secrets.LOGENV }}",
                "slotSetting": false
              },
              {
                "name" : "LOGHOSTNAME",
                "value": "${{ secrets.LOGHOSTNAME }}",
                "slotSetting": false
              },
              {
                "name" : "LOGLEVEL",
                "value": "${{ vars.LOGLEVEL }}",
                "slotSetting": false
              },
              {
                "name" : "SERVERPORT",
                "value": "${{ vars.SERVERPORT }}",
                "slotSetting": false
              },
              {
                "name" : "NODE_ENV",
                "value": "${{ vars.NODE_ENV }}",
                "slotSetting": false
              }
            ]        


      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Lowercase the repo name and username
        run: echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}
      
      - name: Show secret
        run: echo "OPSBASEURL=${{ secrets.OPSBASEURL }}"
        
      - name: Build and push container image to registry
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKERHUB_REPO_NAME }}:${{ github.sha }}
          file: ./Dockerfile

  deploy:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Development'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Lowercase the repo name and username
        run: echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          images: '${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKERHUB_REPO_NAME }}:${{ github.sha }}'
